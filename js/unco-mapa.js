// Generated by CoffeeScript 2.4.1
// unco-mapa.coffee --
// Copyright (C) 2020 Christian Gimenez

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// The classrooms map.
var Map;

Map = class Map {
  // @param maindiv {object} The HTML SVG object.
  constructor(maindiv1, load_callback = null) {
    this.maindiv = maindiv1;
    this.load_map(load_callback);
  }

  // Load the map from the SVG URL.
  load_map(load_callback = null) {
    return fetch(this.map_url()).then((result) => {
      return result.text().then((text) => {
        this.maindiv.innerHTML = text;
        if (load_callback != null) {
          return load_callback();
        }
      });
    });
  }

  reset_all() {
    var lst;
    lst = this.maindiv.querySelectorAll('rect');
    lst.forEach(function(elt) {
      if (elt.style.fill === "red") {
        return elt.style.fill = elt.previous_fill;
      }
    });
    lst = this.maindiv.querySelectorAll('path');
    return lst.forEach(function(elt) {
      if (elt.style.fill === "red") {
        return elt.style.fill = elt.previous_fill;
      }
    });
  }

  // Highlight the classroom name

  // @param classroom {string} The classroom ID.
  highlight(classroom) {
    var draw, rect;
    draw = this.maindiv.querySelector("#" + classroom);
    if (draw.style.fill === 'red') {
      return;
    }
    this.reset_all();
    rect = draw.querySelector('rect');
    rect.previous_fill = rect.style.fill;
    rect.style.fill = 'red';
    draw.previous_fill = draw.style.fill;
    return draw.style.fill = 'red';
  }

  // Return all classrooms id and names.

  // @return {array} An array of objects.
  get_classrooms() {
    var lst;
    lst = Array.from(this.maindiv.querySelectorAll('rect'));
    lst = lst.concat(Array.from(this.maindiv.querySelectorAll('path')));
    return lst.map(function(elt) {
      return {
        id: elt.getAttribute('id'),
        name: elt.getAttribute('inkscape:label')
      };
    });
  }

};

// The Overview Map
export var Overview = class Overview extends Map {
  map_url() {
    return '../imgs/overview.svg';
  }

  get_buildings() {
    var lst;
    lst = Array.from(this.maindiv.querySelectorAll('g'));
    lst = lst.filter(function(elt) {
      return elt.getAttribute('inkscape:label') !== null;
    });
    return lst.map(function(elt) {
      return {
        id: elt.getAttribute('id'),
        name: elt.getAttribute('inkscape:label')
      };
    });
  }

};

// Buildings
export var Buildings = class Buildings extends Map {
  map_url() {
    return '../imgs/buildings.svg';
  }

  constructor(maindiv, load_callback = null) {
    super(maindiv, () => {
      this.reset_all();
      return load_callback();
    });
  }

  // Hide all buildings
  reset_all() {
    var lst;
    lst = this.maindiv.querySelectorAll('g');
    return lst.forEach(function(elt) {
      // if elt.attributes['inkscape:label'] 
      return elt.style.display = 'none';
    });
  }

  show_building(name) {
    var building;
    building = this.maindiv.querySelector('#' + name);
    return building.style.display = '';
  }

};
